// abstractformwindowmanager.sip generated by MetaSIP on Fri Sep 28 02:47:48 2012
//
// This file is part of the QtDesigner Python extension module.
//
// Copyright (c) 2012 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QDesignerFormWindowManagerInterface : QObject /Abstract/
{
%TypeHeaderCode
#include <abstractformwindowmanager.h>
%End

public:
    QDesignerFormWindowManagerInterface(QObject *parent /TransferThis/ = 0);
    virtual ~QDesignerFormWindowManagerInterface();
    virtual QAction *actionCut() const /Transfer/;
    virtual QAction *actionCopy() const /Transfer/;
    virtual QAction *actionPaste() const /Transfer/;
    virtual QAction *actionDelete() const /Transfer/;
    virtual QAction *actionSelectAll() const /Transfer/;
    virtual QAction *actionLower() const /Transfer/;
    virtual QAction *actionRaise() const /TransferBack/;
    virtual QAction *actionUndo() const /Transfer/;
    virtual QAction *actionRedo() const /Transfer/;
    virtual QAction *actionHorizontalLayout() const /Transfer/;
    virtual QAction *actionVerticalLayout() const /Transfer/;
    virtual QAction *actionSplitHorizontal() const /Transfer/;
    virtual QAction *actionSplitVertical() const /Transfer/;
    virtual QAction *actionGridLayout() const /Transfer/;
    virtual QAction *actionBreakLayout() const /Transfer/;
    virtual QAction *actionAdjustSize() const /Transfer/;
%If (Qt_4_4_0 -)
    QAction *actionFormLayout() const /Transfer/;
%End
%If (Qt_4_4_0 -)
    QAction *actionSimplifyLayout() const /Transfer/;
%End
    virtual QDesignerFormWindowInterface *activeFormWindow() const;
    virtual int formWindowCount() const;
    virtual QDesignerFormWindowInterface *formWindow(int index) const /Transfer/;
    virtual QDesignerFormWindowInterface *createFormWindow(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0) /Factory/;
    virtual QDesignerFormEditorInterface *core() const;

signals:
    void formWindowAdded(QDesignerFormWindowInterface *formWindow);
    void formWindowRemoved(QDesignerFormWindowInterface *formWindow);
    void activeFormWindowChanged(QDesignerFormWindowInterface *formWindow);

public slots:
    virtual void addFormWindow(QDesignerFormWindowInterface *formWindow);
    virtual void removeFormWindow(QDesignerFormWindowInterface *formWindow);
    virtual void setActiveFormWindow(QDesignerFormWindowInterface *formWindow);

private:
%If (Qt_4_4_0 -)
    QDesignerFormWindowManagerInterface(const QDesignerFormWindowManagerInterface &other);
%End
};
