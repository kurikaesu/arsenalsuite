/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Tue Nov 16 10:51:08 2010
 */

#include "sipAPIAssfreezer.h"

#line 18 "sip/jobviewerplugin.sip"
#include <jobviewerfactory.h>
#line 12 "sipAssfreezerJobViewerFactory.cpp"

#line 5 "sip/jobviewerplugin.sip"
#include <jobviewerplugin.h>
#line 16 "sipAssfreezerJobViewerFactory.cpp"


extern "C" {static PyObject *meth_JobViewerFactory_registerPlugin(PyObject *, PyObject *);}
static PyObject *meth_JobViewerFactory_registerPlugin(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        JobViewerPlugin * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J:", sipType_JobViewerPlugin, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            JobViewerFactory::registerPlugin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_JobViewerFactory, sipName_registerPlugin, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_JobViewerFactory(void *, const sipTypeDef *);}
static void *cast_JobViewerFactory(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_JobViewerFactory)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_JobViewerFactory(void *, int);}
static void release_JobViewerFactory(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<JobViewerFactory *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_JobViewerFactory(void *, SIP_SSIZE_T, const void *);}
static void assign_JobViewerFactory(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<JobViewerFactory *>(sipDst)[sipDstIdx] = *reinterpret_cast<const JobViewerFactory *>(sipSrc);
}


extern "C" {static void *array_JobViewerFactory(SIP_SSIZE_T);}
static void *array_JobViewerFactory(SIP_SSIZE_T sipNrElem)
{
    return new JobViewerFactory[sipNrElem];
}


extern "C" {static void *copy_JobViewerFactory(const void *, SIP_SSIZE_T);}
static void *copy_JobViewerFactory(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new JobViewerFactory(reinterpret_cast<const JobViewerFactory *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_JobViewerFactory(sipSimpleWrapper *);}
static void dealloc_JobViewerFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_JobViewerFactory(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_JobViewerFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_JobViewerFactory(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    JobViewerFactory *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new JobViewerFactory();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const JobViewerFactory * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_JobViewerFactory, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new JobViewerFactory(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_JobViewerFactory[] = {
    {SIP_MLNAME_CAST(sipName_registerPlugin), meth_JobViewerFactory_registerPlugin, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_Assfreezer_JobViewerFactory = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_JobViewerFactory,
        {0}
    },
    {
        sipNameNr_JobViewerFactory,
        {0, 0, 1},
        1, methods_JobViewerFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_JobViewerFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_JobViewerFactory,
    assign_JobViewerFactory,
    array_JobViewerFactory,
    copy_JobViewerFactory,
    release_JobViewerFactory,
    cast_JobViewerFactory,
    0,
    0,
    0
},
    0,
    0,
    0
};
