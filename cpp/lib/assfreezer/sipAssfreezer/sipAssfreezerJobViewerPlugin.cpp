/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.10.2 on Tue Nov 16 10:51:08 2010
 */

#include "sipAPIAssfreezer.h"

#line 5 "sip/jobviewerplugin.sip"
#include <jobviewerplugin.h>
#line 12 "sipAssfreezerJobViewerPlugin.cpp"

#line 26 "/usr/share/sip/blur/joblist.sip"
#include <joblist.h>
#include "element.h"
#include "host.h"
#include "jobtype.h"
#include "project.h"
#include "user.h"
#include "jobstat.h"
#include "job.h"
#include "jobfilterset.h"
#include "joberror.h"
#include "jobhistory.h"
#include "joboutput.h"
#include "jobservice.h"
#include "jobstatus.h"
#include "jobtask.h"

#line 31 "sipAssfreezerJobViewerPlugin.cpp"
#line 41 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 34 "sipAssfreezerJobViewerPlugin.cpp"


class sipJobViewerPlugin : public JobViewerPlugin
{
public:
    sipJobViewerPlugin();
    sipJobViewerPlugin(const JobViewerPlugin&);
    virtual ~sipJobViewerPlugin();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QString name();
    QString icon();
    void view(const JobList&);
    bool enabled(const JobList&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipJobViewerPlugin(const sipJobViewerPlugin &);
    sipJobViewerPlugin &operator = (const sipJobViewerPlugin &);

    char sipPyMethods[4];
};

sipJobViewerPlugin::sipJobViewerPlugin(): JobViewerPlugin(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipJobViewerPlugin::sipJobViewerPlugin(const JobViewerPlugin& a0): JobViewerPlugin(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipJobViewerPlugin::~sipJobViewerPlugin()
{
    sipCommonDtor(sipPySelf);
}

QString sipJobViewerPlugin::name()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_name);

    if (!meth)
        return JobViewerPlugin::name();

    typedef QString (*sipVH_QtCore_57)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_57)(sipModuleAPI_Assfreezer_QtCore->em_virthandlers[57]))(sipGILState,meth,0);
}

QString sipJobViewerPlugin::icon()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_icon);

    if (!meth)
        return JobViewerPlugin::icon();

    typedef QString (*sipVH_QtCore_57)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_57)(sipModuleAPI_Assfreezer_QtCore->em_virthandlers[57]))(sipGILState,meth,0);
}

void sipJobViewerPlugin::view(const JobList& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_view);

    if (!meth)
    {
        JobViewerPlugin::view(a0);
        return;
    }

    extern void sipVH_Assfreezer_3(sip_gilstate_t,PyObject *,bool*,const JobList&);

    sipVH_Assfreezer_3(sipGILState,meth,0,a0);
}

bool sipJobViewerPlugin::enabled(const JobList& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_enabled);

    if (!meth)
        return JobViewerPlugin::enabled(a0);

    extern bool sipVH_Assfreezer_2(sip_gilstate_t,PyObject *,bool*,const JobList&);

    return sipVH_Assfreezer_2(sipGILState,meth,0,a0);
}


extern "C" {static PyObject *meth_JobViewerPlugin_name(PyObject *, PyObject *);}
static PyObject *meth_JobViewerPlugin_name(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        JobViewerPlugin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_JobViewerPlugin, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->JobViewerPlugin::name() : sipCpp->name()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_JobViewerPlugin, sipName_name, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_JobViewerPlugin_icon(PyObject *, PyObject *);}
static PyObject *meth_JobViewerPlugin_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        JobViewerPlugin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_JobViewerPlugin, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->JobViewerPlugin::icon() : sipCpp->icon()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_JobViewerPlugin, sipName_icon, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_JobViewerPlugin_view(PyObject *, PyObject *);}
static PyObject *meth_JobViewerPlugin_view(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const JobList * a0;
        JobViewerPlugin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_JobViewerPlugin, &sipCpp, sipType_JobList, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->JobViewerPlugin::view(*a0) : sipCpp->view(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_JobViewerPlugin, sipName_view, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_JobViewerPlugin_enabled(PyObject *, PyObject *);}
static PyObject *meth_JobViewerPlugin_enabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const JobList * a0;
        JobViewerPlugin *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_JobViewerPlugin, &sipCpp, sipType_JobList, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->JobViewerPlugin::enabled(*a0) : sipCpp->enabled(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_JobViewerPlugin, sipName_enabled, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_JobViewerPlugin(void *, const sipTypeDef *);}
static void *cast_JobViewerPlugin(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_JobViewerPlugin)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_JobViewerPlugin(void *, int);}
static void release_JobViewerPlugin(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipJobViewerPlugin *>(sipCppV);
    else
        delete reinterpret_cast<JobViewerPlugin *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_JobViewerPlugin(void *, SIP_SSIZE_T, const void *);}
static void assign_JobViewerPlugin(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<JobViewerPlugin *>(sipDst)[sipDstIdx] = *reinterpret_cast<const JobViewerPlugin *>(sipSrc);
}


extern "C" {static void *array_JobViewerPlugin(SIP_SSIZE_T);}
static void *array_JobViewerPlugin(SIP_SSIZE_T sipNrElem)
{
    return new JobViewerPlugin[sipNrElem];
}


extern "C" {static void *copy_JobViewerPlugin(const void *, SIP_SSIZE_T);}
static void *copy_JobViewerPlugin(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new JobViewerPlugin(reinterpret_cast<const JobViewerPlugin *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_JobViewerPlugin(sipSimpleWrapper *);}
static void dealloc_JobViewerPlugin(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipJobViewerPlugin *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_JobViewerPlugin(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_JobViewerPlugin(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_JobViewerPlugin(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipJobViewerPlugin *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipJobViewerPlugin();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const JobViewerPlugin * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_JobViewerPlugin, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipJobViewerPlugin(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_JobViewerPlugin[] = {
    {SIP_MLNAME_CAST(sipName_enabled), meth_JobViewerPlugin_enabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_JobViewerPlugin_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_JobViewerPlugin_name, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_view), meth_JobViewerPlugin_view, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_Assfreezer_JobViewerPlugin = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_JobViewerPlugin,
        {0}
    },
    {
        sipNameNr_JobViewerPlugin,
        {0, 0, 1},
        4, methods_JobViewerPlugin,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_JobViewerPlugin,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_JobViewerPlugin,
    assign_JobViewerPlugin,
    array_JobViewerPlugin,
    copy_JobViewerPlugin,
    release_JobViewerPlugin,
    cast_JobViewerPlugin,
    0,
    0,
    0
},
    0,
    0,
    0
};
